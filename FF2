--POOG FOOG

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Poog foogs FF2 Sub to Poog Foog for more", "Serpent")

-- MAIN
local Main = Window:NewTab("Main")
local MainSection = Main:NewSection("Main")

MainSection:NewButton("Ball Mag", "When close ball magnets", function()
    local plr = game.Players.LocalPlayer
local rs = game:GetService("RunService")

function magBall(ball)
   if ball and plr.Character then
       firetouchinterest(plr.Character["Left Arm"], ball, 0)
       task.wait()
       firetouchinterest(plr.Character["Left Arm"], ball, 1)
   end
end

rs.Stepped:Connect(function()
   for i,v in pairs(workspace:GetChildren()) do
       if v.Name == "Football" and v:IsA("BasePart") then
           magBall(v)
       end
   end
end)



end)







        --// UI Setup
        do
            local GrapherSection = Variables.MainTab:AddSection("Ball pred")
            GrapherSection:AddToggle("Enabled", {flag = "Grapher_Enabled"}, function() end)
        end
        
        Grapher.Marker = Instance.new("Part")
        Grapher.Marker.Anchored = true
        Grapher.Marker.Transparency = .8
        Grapher.Marker.Color = Color3.fromRGB(255, 0, 255)
        Grapher.Marker.CanCollide = false
        Grapher.Marker.Name = "Marker"
        
        Grapher.Params = RaycastParams.new()
        Grapher.Params.IgnoreWater = true 
        Grapher.Params.FilterType = Enum.RaycastFilterType.Whitelist
        
        Grapher.CastStep = 3 / 60
        
        Grapher.LastSavedPower = 60
        
        function Grapher:GetCollidables()
            local Collidables = {}
            
            for _, BasePart in ipairs(workspace:GetDescendants()) do
                if BasePart:IsA("BasePart") and BasePart.CanCollide == true then
                    table.insert(Collidables, BasePart)
                end
            end
            return Collidables
        end
        
        function Grapher:WipeMarkers()
            for i,v in pairs(workspace:GetChildren()) do
                if v.Name == "Marker" then v:Destroy() end
            end
        end
        
        function Grapher:GetLanding(origin, velocity, c)
            local Elapsed = 0
            local LastPos = origin
            
            self.Params.FilterDescendantsInstances = self:GetCollidables()
            
            local Football_Highlight;
        
            if c then
                Football_Highlight = Instance.new("Highlight", game.CoreGui)
                Football_Highlight.Adornee = c 
                Football_Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                Football_Highlight.Enabled = true  
            end
        
            while true do
                Elapsed += Grapher.CastStep
        
                local nPos = origin + velocity * Elapsed - Vector3.new(0, .5 * 28 * Elapsed ^ 2, 0)
                
                local Marker = self.Marker:Clone(); Marker.Parent = workspace; Marker.Position = nPos
                if c and Football_Highlight and c.Parent ~= workspace or c and not c:FindFirstChildOfClass("BodyForce") then
                    Football_Highlight:Destroy()
                    self:WipeMarkers()
                    break
                end
        
                task.wait()
            end
        end
        
        do
            workspace.ChildAdded:Connect(function(child)
                if child.Name == "Football" and child:IsA("BasePart") and Variables.CatchingTab.Flags["Grapher_Enabled"] then
                    local tempCon; tempCon = child:GetPropertyChangedSignal("Velocity"):Connect(function()
                        Grapher:GetLanding(child.Position, child.Velocity, child)
                        tempCon:Disconnect()
                    end)
                end
            end)     
        
            --[[
            Variables.Client.PlayerGui.ChildAdded:Connect(function(child)
                if child.Name == "BallGui" then
                    task.spawn(function()
                        while true do if Variables.CatchingTab.Flags["Grapher_Enabled"] then
                            if child.Parent ~= Variables.Client.PlayerGui then break end 
                            local Frame = child:FindFirstChild("Frame")
                            local Display = Frame and Frame:FindFirstChild("Disp")
                            local Power = Display and tonumber(Display.Text)
                            if Power ~= nil then
                                Grapher.LastSavedPower = Power
                            end 
        
                            Grapher:GetLanding(Variables.Character:FindFirstChild("Head").Position, ((Variables.Client:GetMouse().Hit.Position - Variables.Character:FindFirstChild("Head").Position).Unit * Grapher.LastSavedPower))
                            task.wait(.2)
                            Grapher:WipeMarkers()
                            task.wait()
                        end
                        end
                    end)
                end
            end)
            --]]
        end
        
        
        return Grapher 
    else
        print("Toggle Off")
    end
end)








MainSection:NewButton("Ball predictions", "ButtonInfo", function()
	local Grapher = {}
	
	Grapher.Marker = Instance.new("Part")
	Grapher.Marker.Anchored = true
	Grapher.Marker.Transparency = 2
	Grapher.Marker.Color = Color3.fromRGB(255, 0, 255)
	Grapher.Marker.CanCollide = false
	Grapher.Marker.Name = "Marker"
	
	Grapher.Params = RaycastParams.new()
	Grapher.Params.IgnoreWater = true 
	Grapher.Params.FilterType = Enum.RaycastFilterType.Whitelist
	
	Grapher.CastStep = 3 / 60
	
	Grapher.LastSavedPower = 60
	
	function Grapher:GetCollidables()
		local Collidables = {}
		
		for _, BasePart in ipairs(workspace:GetDescendants()) do
			if BasePart:IsA("BasePart") and BasePart.CanCollide == true then
				table.insert(Collidables, BasePart)
			end
		end
		return Collidables
	end
	
	function Grapher:WipeMarkers()
		for i,v in pairs(workspace:GetChildren()) do
			if v.Name == "Marker" then v:Destroy() end
		end
	end
	
	function Grapher:GetLanding(origin, velocity, c)
		local Elapsed = 0
		local LastPos = origin
		
		self.Params.FilterDescendantsInstances = self:GetCollidables()
		
		local Football_Highlight;
	
		if c then
			Football_Highlight = Instance.new
			Football_Highlight.Adornee = c 
			Football_Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
			Football_Highlight.Enabled = true  
		end
	
		while true do
			Elapsed += Grapher.CastStep
	
			local nPos = origin + velocity * Elapsed - Vector3.new(0, .5 * 28 * Elapsed ^ 2, 0)
			
			local Marker = self.Marker:Clone(); Marker.Parent = workspace; Marker.Position = nPos
			if c and Football_Highlight and c.Parent ~= workspace or c and not c:FindFirstChildOfClass("BodyForce") then
				Football_Highlight:Destroy()
				self:WipeMarkers()
				break
			end
	
			task.wait()
		end
	end
	
	do
		workspace.ChildAdded:Connect(function(child)
			if child.Name == "Football" and child:IsA("BasePart")  then
				local tempCon; tempCon = child:GetPropertyChangedSignal("Velocity"):Connect(function()
					Grapher:GetLanding(child.Position, child.Velocity, child)
					tempCon:Disconnect()
				end)
			end
		end)     
	
		--[[
		Variables.Client.PlayerGui.ChildAdded:Connect(function(child)
			if child.Name == "BallGui" then
				task.spawn(function()
					while true do if Variables.CatchingTab.Flags["Grapher_Enabled"] then
						if child.Parent ~= Variables.Client.PlayerGui then break end 
						local Frame = child:FindFirstChild("Frame")
						local Display = Frame and Frame:FindFirstChild("Disp")
						local Power = Display and tonumber(Display.Text)
						if Power ~= nil then
							Grapher.LastSavedPower = Power
						end 
	
						Grapher:GetLanding(Variables.Character:FindFirstChild("Head").Position, ((Variables.Client:GetMouse().Hit.Position - Variables.Character:FindFirstChild("Head").Position).Unit * Grapher.LastSavedPower))
						task.wait(.2)
						Grapher:WipeMarkers()
						task.wait()
					end
					end
				end)
			end
		end)
		--]]
	end
	
	
	return Grapher 
end)




MainSection:NewButton("Click TP (F)", "ButtonInfo", function()
    local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
UIS.InputBegan:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.F then
            _G.Running = true
                while wait(0.09) and _G.Running == true do
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * 0.7

end
        end
end)
UIS.InputEnded:connect(function(UserInput)
        if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.F then
                _G.Running = false
        end
end)
end)











MainSection:NewButton("Tracers", "ButtonInfo", function()
	_G.TeamCheck = false
    _G.Tracers = true
    --// local shit stuff i guess \\--
    local lp = game.Players.LocalPlayer
    local camera = game:GetService("Workspace").CurrentCamera
    local CurrentCamera = workspace.CurrentCamera
    local worldToViewportPoint = CurrentCamera.worldToViewportPoint
    for i,v in pairs(game.Players:GetChildren()) do
        local Tracer = Drawing.new("Line")
        Tracer.Visible = false
        Tracer.Color = Color3.new(255,0,255)
        Tracer.Thickness = 2
        Tracer.Transparency = 1
        
        function traces()
            game:GetService("RunService").RenderStepped:Connect(function()
                if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lp and v.Character.Humanoid.Health > 0 then
                    local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
                    
                    if OnScreen then
                        Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                        Tracer.To = Vector2.new(Vector.X, Vector.Y)
                        
                        if _G.TeamCheck and v.TeamColor == lp.TeamColor then
                            Tracer.Visible = false
                        else
                            Tracer.Visible = true
                        end
                    else
                        Tracer.Visible = false
                    end
                else
                    Tracer.Visible = false
                end
                if _G.Tracers == false then
                    Tracers.Visible = false
                end
            end)
        end
        coroutine.wrap(traces)()
    end
    game.Players.PlayerAdded:Connect(function()
        local Tracer = Drawing.new("Line")
        Tracer.Visible = false
        Tracer.Color = Color3.new(255,0,0)
        Tracer.Thickness = 2
        Tracer.Transparency = 2
        
        function traces()
            game:GetService("RunService").RenderStepped:Connect(function()
                if v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lp and v.Character.Humanoid.Health > 0 then
                    local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
                    if OnScreen then
                        Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                        Tracer.To = Vector2.new(Vector.X, Vector.Y)
                        
                        if _G.TeamCheck and v.TeamColor == lp.TeamColor then
                            Tracer.Visible = false
                        else
                            Tracer.Visible = true
                        end
                    else
                        Tracer.Visible = false
                    end
                else
                    Tracer.Visible = false
                end
                if _G.Tracers == false then
                    Tracers.Visible = false
                end
            end)
        end
        coroutine.wrap(traces)()
    end)
 



end)





MainSection:NewButton("Skeletons", "ButtonInfo", function()
    game:GetService("StarterGui"):SetCore("SendNotification",{ 	
        Title = "Made By:",  	
        Text = "Poog Foog",
            Icon = "",
            Duration = 20
        })
        
        local camera = workspace.CurrentCamera
        local entities = game:GetService("Players")
        local localplayer = entities.LocalPlayer 
        local runservice = game:GetService("RunService")
        --// Setting \\-- 
        local esp_settings = {
            enabled = true,
            skel = true,
            skel_col = Color3.fromRGB(204,0,204)
        }
        local function draw(player, character)
            -- Head
            local skel_head = Drawing.new("Line")
            skel_head.Visible = false
            skel_head.Thickness = 3
            skel_head.Color = Color3.new(255,0,255)
            -- Torso
            local skel_torso = Drawing.new("Line")
            skel_torso.Visible = false
            skel_torso.Thickness = 2
            skel_torso.Color = Color3.new(255,0,255)
            -- LeftArm
            local skel_leftarm = Drawing.new("Line")
            skel_leftarm.Visible = false
            skel_leftarm.Thickness = 2
            skel_leftarm.Color = Color3.new(255,0,255)
            -- RightArm
            local skel_rightarm = Drawing.new("Line")
            skel_rightarm.Visible = false
            skel_rightarm.Thickness = 2
            skel_rightarm.Color = Color3.new(255,0,255)
            -- LeftLeg
            local skel_leftleg = Drawing.new("Line")
            skel_leftleg.Visible = false
            skel_leftleg.Thickness = 2
            skel_leftleg.Color = Color3.new(255,0,255)
            -- RightLeg
            local skel_rightleg = Drawing.new("Line")
            skel_rightleg.Visible = false
            skel_rightleg.Thickness = 2
            skel_rightleg.Color = Color3.new(255,0,255)
            local function update()
                local connection
                connection = runservice.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(character.Name) and
                    character and 
                    character:FindFirstChild("HumanoidRootPart") and 
                    character:FindFirstChild("Humanoid") and 
                    character:FindFirstChild("Humanoid").Health ~= 0 then 
                        local character_rootpart_3d = character.HumanoidRootPart.Position
                        local character_rootpart_2d, rootpart_onscreen = camera:WorldToViewportPoint(character_rootpart_3d)
                        if rootpart_onscreen and character.Humanoid.RigType == Enum.HumanoidRigType.R6 and esp_settings.enabled then
                            local head_2d = camera:WorldToViewportPoint(character.Head.Position)
                                
                            local torso_upper_2d = camera:WorldToViewportPoint(character.Torso.Position + Vector3.new(0,1,0))
                            local torso_lower_2d = camera:WorldToViewportPoint(character.Torso.Position + Vector3.new(0,-1,0))
                          
                            local leftarm_2d = camera:WorldToViewportPoint(character["Left Arm"].Position + Vector3.new(0,-1,0))
                            local rightarm_2d = camera:WorldToViewportPoint(character["Right Arm"].Position + Vector3.new(0,-1,0))
                            local leftleg_2d = camera:WorldToViewportPoint(character["Left Leg"].Position + Vector3.new(0,-1,0))
                            local rightleg_2d = camera:WorldToViewportPoint(character["Right Leg"].Position + Vector3.new(0,-1,0))
                                
                            skel_head.From = Vector2.new(head_2d.X, head_2d.Y)
                            skel_head.To = Vector2.new(torso_upper_2d.X, torso_upper_2d.Y)
        
                            skel_torso.From = Vector2.new(torso_upper_2d.X, torso_upper_2d.Y)
                            skel_torso.To = Vector2.new(torso_lower_2d.X, torso_lower_2d.Y)
                            
                            skel_leftarm.From = Vector2.new(torso_upper_2d.X, torso_upper_2d.Y)
                            skel_leftarm.To = Vector2.new(leftarm_2d.X, leftarm_2d.Y)
        
                            skel_rightarm.From = Vector2.new(torso_upper_2d.X, torso_upper_2d.Y)
                            skel_rightarm.To = Vector2.new(rightarm_2d.X, rightarm_2d.Y)
        
                            skel_leftleg.From = Vector2.new(torso_lower_2d.X, torso_lower_2d.Y)
                            skel_leftleg.To = Vector2.new(leftleg_2d.X, leftleg_2d.Y)
        
                            skel_rightleg.From = Vector2.new(torso_lower_2d.X, torso_lower_2d.Y)
                            skel_rightleg.To = Vector2.new(rightleg_2d.X, rightleg_2d.Y)
        
                            skel_head.Visible = esp_settings.skel
                            skel_torso.Visible = esp_settings.skel
                            skel_leftarm.Visible = esp_settings.skel
                            skel_rightarm.Visible = esp_settings.skel
                            skel_leftleg.Visible = esp_settings.skel
                            skel_rightleg.Visible = esp_settings.skel
                        else
                            skel_head.Visible = false
                            skel_torso.Visible = false
                            skel_leftarm.Visible = false
                            skel_rightarm.Visible = false
                            skel_leftleg.Visible = false
                            skel_rightleg.Visible = false
                        end
                    else
                        if player == nil then
                            connection:Disconnect()
                            connection = nil 
                        end
                        skel_head.Visible = false
                        skel_torso.Visible = false
                        skel_leftarm.Visible = false
                        skel_rightarm.Visible = false
                        skel_leftleg.Visible = false
                        skel_rightleg.Visible = false
                    end
                end)
            end
            coroutine.wrap(update)()
        end
        local function playeradded(player)
            if player.Character then
                coroutine.wrap(draw)(player, player.Character)
            end
            player.CharacterAdded:Connect(function(character)
                coroutine.wrap(draw)(player, character)
            end)
        end
        for a,b in next, entities:GetPlayers() do
            if b ~= localplayer then
                playeradded(b)
            end
        end
        entities.PlayerAdded:Connect(playeradded)
end)











MainSection:NewButton(" Undetected Speed gui", "ButtonInfo", function()
    local s_rs = game:GetService("RunService")
    local l_plr = game:GetService("Players").LocalPlayer
    
    
    
    local l_humrp = l_plr.Character and l_plr.Character:FindFirstChild("HumanoidRootPart")
    local l_hum = l_plr.Character and l_plr.Character:FindFirstChild("Humanoid")
    
    local resp_con = l_plr.CharacterAdded:Connect(function(c) 
        l_humrp = c:WaitForChild("HumanoidRootPart",3)
        l_hum = c:WaitForChild("Humanoid",3)
    end)
    
    local function dnec(signal) 
        local s = {}
        for _, con in ipairs(getconnections(signal)) do 
            local func = con.Function
            if (func and islclosure(func)) then
                if (not is_synapse_function(func)) then 
                    s[#s+1] = con
                    con:Disable() 
                end
            end
        end
        return s
    end
    
    
    local speed_amnt = 5
    
    local ui = loadstring(game:HttpGet('https://raw.githubusercontent.com/topitbopit/rblx/main/ui-stuff/jeff_2.lua'))()
    ui:SetColors('streamline')
    
    
    
    local w = ui:NewWindow('speed',250,200)
    
    local m = w:NewMenu('speed')
    local t = m:NewToggle('toggle speed')
    local s = m:NewSlider('speed amount',0.3,20,5)
    
    t:SetTooltip("toggles speedhacks")
    s:SetTooltip("speedhack speed")
    
    m:NewLabel()
    m:NewLabel('Made by Poog foog')
    
    s.OnValueChanged:Connect(function(v) 
        speed_amnt = v
    end)
    
    do
        local a,b
        t.OnToggle:Connect(function(t)
            if (t) then
                a = dnec(l_humrp.Changed)
                b = dnec(l_humrp:GetPropertyChangedSignal("CFrame"))
                
                s_rs:BindToRenderStep("speed",2000,function(dt)
                    l_humrp.CFrame += l_hum.MoveDirection*dt*5*speed_amnt
                end)
            else
                s_rs:UnbindFromRenderStep("speed")
                
                for i,v in ipairs(a) do 
                    v:Enable()
                end
                for i,v in ipairs(b) do 
                    v:Enable()
                end
            end
        end)
    end
    
    ui.Exiting:Connect(function() 
        for i,v in ipairs(ui:GetAllToggles()) do 
            if (v:IsEnabled()) then
                v:Disable()
            end
        end
        resp_con:Disconnect()
    end)
    
    ui:Ready()
end)
